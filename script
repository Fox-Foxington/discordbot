
/*




  if (channel) {
    // Log channel ID and name for debugging
    console.log("Channel ID:", channel.id);
    console.log("Channel name:", channel.name);

    // Log the channel type for debugging
    console.log("Channel type:", channel.type);

    // Check if the channel is a text channel
    if (channel.type === ChannelType.GUILD_TEXT) {
      channel.messages
        .fetch(messageId)
        .then((message) => {
          if (message) {
            // Attach the event listener for reaction adds
            client.on("messageReactionAdd", async (reaction, user) => {
              // Check if the reaction is in the correct channel and on the correct message
              if (reaction.message.channel.id === channelId && reaction.message.id === messageId) {
                console.log("Reaction added:", reaction.emoji.name, "by user:", user.tag);
                console.log("Message ID:", reaction.message.id); // Log message ID
                console.log("Partial:", reaction.partial); // Log whether the reaction is partial

                // Call the createTicket function to create a ticket
                // await createTicket(reaction.message);

                // Comment out or remove the line below to prevent removing the user's reaction
                // await reaction.users.remove(user);
                console.log("Reaction processing completed.");
              }
            });
          } else {
            console.error(`Message with ID ${messageId} not found.`);
          }
        })
        .catch((error) => {
          console.error("Error fetching message:", error);
        });
    } else {
      console.error(`Channel ${channelId} is not a text channel. Type: ${channel.type}`);
    }
  } else {
    console.error("Channel not found.");
  }
});*







  




// Listen for message reactions
client.on('messageReactionAdd', async (reaction, user) => {
    console.log('Reaction added:', reaction.emoji.name, 'by user:', user.tag);
    console.log('Message ID:', reaction.message.id); // Log message ID
    console.log('Partial:', reaction.partial); // Log whether the reaction is partial

    // Check if the reaction is on the correct message and by a non-bot user
    if (reaction.message.id === '1232227777634373694' && !user.bot) {
        console.log('Reaction on the correct message and by a non-bot user.');

        // Check if the reaction is the desired one
        if (reaction.emoji.name === 'ðŸ“©') {
            console.log('Desired reaction detected: ðŸ“©');
            
            // Call the createTicket function to create a ticket
            await createTicket(reaction.message);
            
            // Comment out or remove the line below to prevent removing the user's reaction
            // await reaction.users.remove(user);
            console.log('Reaction processing completed.');
        }
    }
});













const client = new Client({
    intents: [
      GatewayIntentBits.Guilds,
      GatewayIntentBits.GuildMessages,
      GatewayIntentBits.MessageContent,
      GatewayIntentBits.GuildMembers,
    ],
    partials: ['MESSAGE', 'CHANNEL', 'REACTION'] // Ensure partials are enabled
  });
*



// Define a global variable to store bot settings
let botSettings = {

  status: process.env.ONLINE_STATUS,
  customStatus: process.env.CUSTOM_STATUS,
};

// Parse JSON bodies
app.use(bodyParser.json());

// Define route to receive messages
app.post('/receive-message', (req, res) => {
    const { message } = req.body;
    console.log('Received message from web application:', message);

    // Send the received message to Discord
    sendToDiscord(message)
        .then(() => {
            console.log('Message sent to Discord successfully');
            res.sendStatus(200);
        })
        .catch(error => {
            console.error('Error sending message to Discord:', error);
            res.status(500).send('Internal Server Error');
        });
});

client.on('guildMemberAdd', member => {
    handleGuildMemberAdd(member);
});

client.on('messageCreate', message => {
  
    console.log(`Message: ${message.content}`);
    if (!message.content.startsWith('!') || message.author.bot) return;

    const args = message.content.slice(1).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    console.log('Command:', command); // Add this line for debugging

    const mentionOrId = args[0];
    handleVerifyCommand(message, 'Fox', mentionOrId);
    
});














// Function to send message to Discord
async function sendToDiscord(message) {
    try {
        const channel = await client.channels.fetch(process.env.CHANNELID);
        if (channel) {
            await channel.send(message);
            console.log('Message sent to Discord');
        } else {
            console.error('Unable to find Discord channel');
        }
    } catch (error) {
        console.error('Error sending message to Discord:', error);
    }
}


// Event handler for when the bot is ready
client.once("ready", async () => {
  console.log(`Logged in as ${client.user.tag}`);
  try {
     // Set the bot's status
     await client.user.setStatus(botSettings.status);
    // Set the bot's presence
    const status = await client.user.setPresence({
    
    
      activities: [
        {
          name: "customname",
          type: ActivityType.Custom,
          state: botSettings.customStatus,
        },
      ],
    });
    console.log("Bot presence set successfully!");
    //console.log(JSON.stringify(status));
  } catch (error) {
    console.error("Error setting bot presence:", error);
  }
});


// Event listener for incoming messages
client.on("messageCreate", (message) => {
  // Check if the message starts with the command prefix ("/say")
  if (message.content.startsWith("/say")) {
    // Extract the message content after the command
    const content = message.content.slice("/say".length).trim();

    console.log("Content:", content); // Log the extracted content

    // Send the extracted content to the same channel where the command was used
    message.channel.send(content);
  }
});

client.on("messageCreate", (message) => {
  // Check if the message starts with the command prefix ("/ping")
  if (message.content === "/ping") {
    // Calculate the bot's latency (ping)
    const latency = Date.now() - message.createdTimestamp;
    // Respond with the bot's latency
    message.channel.send(`Pong! Latency is ${latency}ms.`);
  }
});

*/